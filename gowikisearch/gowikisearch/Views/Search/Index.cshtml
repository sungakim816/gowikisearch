@model PagedList.IPagedList<gowikisearch.Models.WikipediaPage>
@using PagedList.Mvc;
@{
    ViewBag.Title = "Search";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<div class="bg-lights p-3">
    <div class="row">
        <form method="get" action="@Url.Action("Index", "Search")" onsubmit="updatePagePopularity(document.getElementById('search-box').value)">
            <div class="col h-100">
                <div class=" h-100 w-100">
                    <div class="searchbar text-black-50">
                        <input id="search-box" class="search_input" type="text" name="query" maxlength="240" onkeyup="showQuerySuggestions(this.value)" placeholder="Search Keywords e.g Hello" value="@ViewBag.query" autocomplete="off" required>
                        <button type="submit" class="search_icon"><i class="fas fa-search text-black-50"></i></button>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div id="query-suggestions"></div>

    <div class="p-3 w-75">
        @if (Model != null && Model.PageCount > 0)
        {
            <div class="container">
                <div class="list-group list-group-flush p-3">
                    @foreach (var page in Model)
                    {
                        <a href="@page.Link" class="list-group-item list-group-item-action p-2 bg-transparent" target="_blank">
                            <div class="d-flex w-100 justify-content-between">
                                <h5 class="mb-1 text-info">@page.Title</h5>
                            </div>
                            <p class="mb-1 text-justify text-dark">@page.Description</p>
                        </a>
                    }
                </div>
            </div>
            <nav>
                <p>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</p>
                <ul class="pagination">
                    <li class="page-item  @(@Model.HasPreviousPage? "": "disabled")">
                        <a class="page-link" href="@Url.Action("Index", new { query = ViewBag.query, pageNumber = Model.PageNumber - 1 })" tabindex="-1" aria-disabled="@(@Model.HasPreviousPage? "false": "true")">
                            Previous
                        </a>
                    </li>
                    @for (var pageNumber = 1; pageNumber <= Model.PageCount; pageNumber++)
                    {
                        <li class="page-item @(@Model.PageNumber == pageNumber? "active": "")">
                            <a class="page-link" href="@Url.Action("Index", new { query = ViewBag.query, pageNumber = pageNumber })">@pageNumber</a>
                        </li>
                    }
                    <li class="page-item @(@Model.HasNextPage? "": "disabled")">
                        <a class="page-link" href="@Url.Action("Index", new { query = ViewBag.query, pageNumber = Model.PageNumber + 1 })" tabindex="-1" aria-disabled="@(@Model.HasNextPage? "false": "true")">Next</a>
                    </li>
                </ul>
            </nav>
        }
        else if (Model != null && Model.PageCount == 0)
        {
            <br />
            <div class="alert alert-info" role="alert">
                <h4>Your search <strong>@ViewBag.Query</strong> did not match any documents.</h4>
                <h5>Suggestions:</h5>
                <ul>
                    <li> Make sure that all words are spelled correctly. </li>
                    <li>  Try different keywords. </li>
                    <li>Try more general keywords.</li>
                    <li> Try fewer keyword</li>
                </ul>
            </div>
        }
    </div>
</div>



@section scripts{
    <script>
        function showQuerySuggestions(str) {
            if (str.length < 1) {
                document.getElementById("query-suggestions").innerHTML = "";
                return;
            } else {
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        $("#query-suggestions").show();
                        document.getElementById("query-suggestions").innerHTML = this.responseText;
                    }
                };
                var actionUrl = "@Url.Action("Autocomplete", "Search")" + "?query=" + str;
                xmlhttp.open("GET", actionUrl, true);
                xmlhttp.send();
            }
        }

        function changeSearchBoxValue(str) {
            if (str.length == 0) {
                return;
            }
            document.getElementById("search-box").value = str;
            $("#query-suggestions").hide();
            $("#search-box").focus();
        }

    function updatePagePopularity(title) {
        var xmlhttp = new XMLHttpRequest();
        var actionUrl = "@Url.Action("UpdatePagePopularity", "Search")" + "/" + title;
        xmlhttp.open("GET", actionUrl, true);
        xmlhttp.send();
    }

    </script>
}


